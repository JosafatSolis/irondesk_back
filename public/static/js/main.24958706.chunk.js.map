{"version":3,"sources":["images/logo.png","images/playa.jpg","AppContext.js","services/baseUrl.js","services/loginService.js","components/Login.js","components/ErrorDialog.js","components/FormikForm.js","components/Modals_Forms/FormikFormTenant.js","components/Modals_Forms/ModalButtonTenant.js","components/Modals_Forms/FormikFormTicket.js","components/Modals_Forms/ModalButtonTicket.js","components/Navbar.js","components/TenantCard.js","components/TenantsContainer.js","components/Timer.js","components/TicketCard.js","components/TicketsContainer.js","components/UserCard.js","components/Modals_Forms/FormikFormUser.js","components/Modals_Forms/ModalButtonUser.js","components/Home.js","components/UsersContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","createContext","base_url","axios","defaults","withCredentials","login","data","console","log","post","logout","logo","require","playa","Login","state","credentials","handleChange","e","target","name","value","setState","handleSubmit","preventDefault","setUser","context","history","props","then","res","user","includes","role","push","tenant","_id","catch","reason","style","backgroundImage","className","border","width","padding","src","alt","onSubmit","uk-icon","onChange","type","placeholder","backgroundColor","Component","contextType","ErrorDialog","touched","message","Yup","shape","min","max","required","email","problem","code","phone","validationSchema","FormikFormTenant","initialValues","values","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","errors","handleBlur","isSubmitting","htmlFor","id","onBlur","disabled","customStyles","content","top","left","right","bottom","height","transform","ModalButton","useState","modalIsOpen","setModalIsOpen","onClick","isOpen","onRequestClose","href","description","FormikFormTicket","rows","NavBar","currentPos","homePath","updateState","currentUser","currentPath","window","location","pathname","lbl","startsWith","this","removeUser","to","uk-accordion","ModalButtonTenant","ModalButtonTicket","TenantCard","tenantId","dayjs","extend","relativeTime","Timer","params","tick","timerId","setInterval","componentWillUnmount","bind","h","String","parseInt","diff","reportDate","m","s","length","TicketCard","status","tenantCode","alignItems","justifyContent","display","textAlign","uk-leader","tecnicianName","format","activities","map","activity","date","toUpperCase","lastName","FormikFormUser","label","Home","App","parse","localStorage","getItem","setItem","removeItem","AppWithRouter","withRouter","Boolean","hostname","match","UIkit","use","Icons","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.24958706.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a712b561.png\";","module.exports = __webpack_public_path__ + \"static/media/playa.94fe1a7a.jpg\";","import { createContext } from 'react';\n\nconst AppContext = createContext();\n\nexport default AppContext;","const isProduction = process.env.NODE_ENV === \"production\";\nexport const base_url = isProduction\n  ? \"heroku.com/irondesk\"\n  : \"http://localhost:3000/api\";\n","import axios from 'axios';\nimport { base_url } from './baseUrl';\naxios.defaults.withCredentials = true;\n\n// Regresan promesas, se debe enviar el objeto COMPLETO, no con destructuring\n\nexport const login = (data) => {\n    console.log(\"baseUrl:\", base_url);\n    return axios.post(`${base_url}/login`, data);\n}\n\nexport const logout = () => {\n    return axios.post(`${base_url}/login/logout`);\n}","import React, { Component } from \"react\";\r\nimport AppContext from \"../AppContext\";\r\nimport { login } from '../services/loginService';\r\n\r\nlet logo = require(\"../images/logo.png\");\r\nlet playa = require(\"../images/playa.jpg\")\r\n\r\n\r\n\r\nclass Login extends Component {\r\n  // Así se enlaza el AppContext para que pueda ser utilizado dentro del componente y compartir y leer variables globales.\r\n  static contextType = AppContext;\r\n\r\n    state={credentials:{} }\r\n\r\n  handleChange = (e) => {\r\n    let { credentials } = this.state;\r\n    credentials = { ...credentials, [e.target.name]: e.target.value };\r\n    this.setState({ credentials });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Se extrae el método setUser del AppContext\r\n    const { setUser } = this.context;\r\n    const { credentials } = this.state;\r\n    const { history } = this.props;\r\n    // Mandamos llamar el servicio que regresa una promesa, que a su vez regrea un objeto res.data con el user dentro\r\n    login(credentials).then(res => {\r\n        // Extrae el usuario y lo asigna al context, mediante el método setUser\r\n        const { user } = res.data;\r\n        setUser(user);\r\n        // Cambia la página dependiendo del rol del usuario logueado:\r\n        if([\"Admin\", \"Tecnician\"].includes(user.role)) {\r\n             history.push(\"home/tenants\")\r\n        } else {\r\n            history.push(`home/tickets/${user.tenant._id}`)\r\n        }\r\n    }).catch(reason => console.log(\"Error\", reason))\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n     \r\n      <main>\r\n\r\n        <section style={{backgroundImage:`url(${playa})`}}\r\n          className=\"\r\n          uk-background-blend-luminosity\r\n          uk-background-primary  \r\n\r\n          uk-height-small uk-panel\r\n          uk-height-viewport \r\n          uk-background-blend-multiply \r\n          uk-background-cover\r\n\r\n          uk-flex \r\n          uk-flex-center \r\n          uk-flex-middle\" >  \r\n          \r\n          <article\r\n          className=\"uk-background-muted \"\r\n          style={{\r\n            border:\"solid 2px #f07e1c\",\r\n            width: \"1000px\",\r\n            padding: \"10px\"\r\n          }}>\r\n\r\n          <div className=\"uk-flex uk-flex-center uk-flex-middle uk-margin-large-left\">\r\n            <img src={logo} alt=\"company\" className=\"uk-margin\"/>\r\n  \r\n            <form \r\n              className=\"uk-width-1-2 uk-margin-large-top uk-margin-large-left\"\r\n              onSubmit={(e) => this.handleSubmit(e)}>\r\n                \r\n                {/* USERNAME: NOMBRE DE LA PERSONA */}\r\n                  <span\r\n                    uk-icon=\"icon: users; ratio: 2\" className=\"uk-margin-small-right\">\r\n                  </span>\r\n                  \r\n                  <input\r\n                    name=\"email\"\r\n                    onChange={(e) => this.handleChange(e)}\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    className=\"uk-width-1-2 uk-form-large uk-text-center\"\r\n                    style={{ border: \"solid 2px #f07e1c\" }}\r\n                  ></input>\r\n            \r\n                {/*PASSWORD A INTRODUCIR --> HACER EL POST */}\r\n              <div>\r\n                <span uk-icon=\"icon: lock; ratio: 2\" className=\"uk-margin-small-right\"> </span>\r\n                <input\r\n                  name=\"password\"\r\n                  onChange={(e) => this.handleChange(e)}\r\n                  className=\"uk-margin-small-top uk-width-1-2 uk-form-large uk-text-center\"\r\n                  type=\"text\"\r\n                  placeholder=\"Password\"\r\n                  style={{ border: \"solid 2px #f07e1c\" }}>\r\n                </input>\r\n              </div>\r\n                {/* BOTON DE LOGIN PARA ENVIAR SOLICITUD*/}\r\n\r\n              <div className=\" uk-align-center \">\r\n                  <button\r\n                    className=\" uk-align-center uk-button uk-button-primary\"\r\n                    style={{backgroundColor:\"#f07e1c\" }}>\r\n                    Login\r\n                  </button>\r\n              </div>\r\n              \r\n            </form>\r\n            \r\n            </div>\r\n          </article>\r\n        </section>\r\n     \r\n      </main>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\"\r\n\r\nconst ErrorDialog = ({touched, message}) =>{\r\n\r\n    if (!touched) {return <div className=\"uk-form-danger\"> &nbsp; </div>}\r\n    if (message) {return <div className=\"uk-form-danger\"> {message} </div>}\r\n\r\n    return <div className= \"uk-form-success\"> pass...\r\n\r\n    </div>\r\n}\r\n\r\nexport default ErrorDialog","import React from 'react';\r\nimport {Formik} from \"formik\" // Es una libreria de React que facilita el manejo de formularios\r\nimport * as Yup from \"yup\"    //libreria para validar el formulario \r\nimport ErrorDialog from \"./ErrorDialog\"\r\n\r\n\r\n// VALIDACIONES --> las vamos a definir usando YUP como si fuera un SCHEMA de base de datos\r\n\r\n\r\nconst validationSchema = Yup.object().shape(  {\r\n    name: Yup.string()\r\n                        \r\n    .min(1, \"Write your name\")\r\n    .max(30, \"Your name is too long\")\r\n    .required(\"You must have a name\"),\r\n\r\n    email: Yup.string()\r\n    .email(\"You must enter a valid email\")\r\n    .required(\"You must enter your email\"),\r\n\r\n    problem: Yup.string()\r\n    .min(70, \"Please describe with more detail...\")\r\n    .max(1000, \"Please use less than 1,000 characters\")\r\n    .required(\"Please enter your problem\"),\r\n\r\n    code: Yup.string()\r\n    .required(\"You must enter a code\"),\r\n\r\n     phone: Yup.string()\r\n    .required(\"You must enter your phone\")\r\n\r\n})\r\n\r\n////////////FORMULARIO\r\n\r\nexport default function FormikForm (){\r\n   \r\n    return (\r\n    <div \r\n    className= \"uk-position-center uk-vertical-align uk-text-center\"\r\n            style={  {\r\n                \r\n                border: \"solid black\",\r\n                backgroundColor:  \"#ADD8E6\",\r\n                    }}  \r\n\r\n    >\r\n    <Formik\r\n        //aqui estan los valores del formulario (Schemas)\r\n        initialValues= { {name: \"\", email: \"\", problem: \"\", code:\"\", phone:\"\"  }}\r\n        validationSchema={validationSchema}\r\n        onSubmit= { (values, {setSubmitting, resetForm} )=>{\r\n           setSubmitting(true)\r\n           // usamos setTime out como si fuera un post a servidor para corroborar que se envía\r\n           setTimeout(  ()=>{\r\n               alert(JSON.stringify(values, null, 2));\r\n               resetForm();\r\n               setSubmitting(false)\r\n           }, 500)\r\n        }}\r\n        >\r\n            {\r\n             ({values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting}  )=>(\r\n                <form onSubmit={handleSubmit}>\r\n                   \r\n                <div>\r\n                    <label htmlFor=\"name\">    Name:       </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    placeholder=\" Enter your name\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.name}\r\n                    style= {{width:\"40%\"}}\r\n                    className={touched.name && errors.name ? \"uk-form-danger uk-text-secondary\" : \"uk-form-success uk-text-secondary\"} \r\n                   />\r\n                    <span   uk-icon=\"user\"\r\n                            className= \"uk-margin-small-left\"\r\n                    ></span>\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.name}\r\n                    message={errors.name}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                  \r\n                    <label htmlFor=\"email\">Email:          </label>\r\n                    <input \r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    placeholder=\" Enter your email\"   \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.email}\r\n                    style= {{width:\"40%\"}}\r\n                    className={touched.email && errors.email ? \"uk-form-danger uk-text-secondary\" : \"uk-form-success uk-text-secondary\"}\r\n                    />\r\n                    <span   uk-icon=\"mail\"\r\n                            className= \"uk-margin-small-left\"\r\n                    ></span>\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.email}\r\n                    message={errors.email}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"code\"> Code :           </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"code\"\r\n                    id=\"code\"\r\n                    placeholder=\" Enter your designed code\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.code}\r\n                    style= {{width:\"40%\"}}\r\n                    className={touched.code && errors.code ? \"uk-form-danger uk-text-secondary\" : \"uk-form-success uk-text-secondary\"}\r\n                    />\r\n                    <span   uk-icon=\"info\"\r\n                            className=\"uk-margin-small-left\"\r\n                    ></span>\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.code}\r\n                    message={errors.code}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"phone\">Phone:          </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"phone\"\r\n                    id=\"phone\"\r\n                    placeholder=\" Enter your phone\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.phone}\r\n                    style= {{width:\"40%\"}}\r\n                    className={touched.phone && errors.phone ? \"uk-form-danger uk-text-secondary\" : \"uk-form-success uk-text-secondary\"}\r\n                    />\r\n                    <span   uk-icon=\"phone\"\r\n                            className= \"uk-margin-small-left\"\r\n                    ></span>\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.phone}\r\n                    message={errors.phone}\r\n                    /> \r\n                </div>\r\n\r\n\r\n                <div>\r\n                <textarea \r\n                    rows=\"6\" \r\n                    placeholder=\"Describe with detail the problem...\"\r\n                    className={touched.problem && errors.problemm ? \"uk-form-danger uk-input uk-text-secondary\" : \"uk-form-success uk-input uk-text-secondary\"}\r\n                    type=\"text\"\r\n                    name=\"problem\"\r\n                    id=\"problem\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.problem}\r\n                    style= {{width:\"70%\"}}\r\n                    >\r\n                </textarea>\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.problem}\r\n                    message={errors.problem}\r\n                    /> \r\n                </div>\r\n\r\n                <div className=\"uk-submit\">\r\n                    <button \r\n                    \r\n                    type=\"submit\"\r\n                    disabled={isSubmitting} // no se pueda apretar mientras se sube}\r\n                    className=\"uk-button uk-button-primary\"\r\n                    >      SUBMIT          </button>\r\n                </div>\r\n\r\n\r\n                </form>\r\n                )}\r\n        \r\n    </Formik>\r\n    </div>\r\n\r\n    \r\n    )}\r\n\r\n\r\n","import React from 'react';\r\nimport {Formik} from \"formik\" // Es una libreria de React que facilita el manejo de formularios\r\nimport * as Yup from \"yup\"    //libreria para validar el formulario \r\nimport ErrorDialog from \"../ErrorDialog\"\r\n\r\n\r\n\r\n// VALIDACIONES --> las vamos a definir usando YUP como si fuera un SCHEMA de base de datos\r\n\r\n\r\nconst validationSchema = Yup.object().shape(  {\r\n    name: Yup.string()\r\n    .required(\"Select a Tenant\"),\r\n\r\n    code: Yup.string()\r\n    .required(\"You must enter a code\")\r\n    .min(2, \"At least use two characters\"),\r\n})\r\n\r\n////////////FORMULARIO\r\n\r\nexport default function FormikFormTenant (){\r\n   \r\n    return (\r\n    <div>\r\n     <Formik\r\n        //aqui estan los valores del formulario (Schemas)\r\n        \r\n        initialValues= { {name: \"\", code:\"\" }}\r\n        validationSchema={validationSchema}\r\n        onSubmit= { \r\n        (values, {setSubmitting, resetForm} )=>{\r\n           setSubmitting(true)\r\n           // usamos setTime out como si fuera un post a servidor para corroborar que se envía\r\n           setTimeout(  ()=>{\r\n               alert(JSON.stringify(values, null, 2));\r\n               resetForm();\r\n               setSubmitting(false)\r\n           }, 500)\r\n        }}\r\n        >\r\n            {\r\n             ({values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting}  )=>(\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                <div>\r\n                    <label htmlFor=\"name\"> Name:           </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    placeholder=\" Enter your name\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.name}\r\n                    className={touched.name && errors.name ? \"uk-form-danger uk-text-secondary uk-text-center uk-input\" : \"uk-form-success uk-text-secondary uk-text-center uk-input\"}\r\n                    />\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.name}\r\n                    message={errors.name}\r\n                    /> \r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"code\"> Code:           </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"code\"\r\n                    id=\"code\"\r\n                    placeholder=\" Enter your code\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.code}\r\n                    className={touched.code && errors.code ? \"uk-form-danger uk-text-secondary uk-text-center uk-input\" : \"uk-form-success uk-text-secondary uk-text-center uk-input\"}\r\n                    />\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.code}\r\n                    message={errors.code}\r\n                    /> \r\n                </div>\r\n\r\n                <div className=\"uk-submit\">\r\n                    <button \r\n                    \r\n                    type=\"submit\"\r\n                    disabled={isSubmitting} // no se pueda apretar mientras se sube}\r\n                    className=\"uk-button uk-button-primary uk-align-center\"\r\n                    >      AGREGAR TENANT          </button>\r\n                </div>\r\n\r\n\r\n                </form>\r\n                )}\r\n        \r\n    </Formik>\r\n    </div>\r\n\r\n    \r\n    )}\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport FormikFormTenant from \"./FormikFormTenant\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"25%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    width: \"30%\",\r\n    height: \"45%\",\r\n    transform: \"translate(-40%, -20%)\",\r\n    border: \"solid 1px #f07e1c\",\r\n  },\r\n};\r\n\r\nfunction ModalButton() {\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  return (\r\n    <div \r\n \r\n    className=\"uk-margin-top uk-text-center\">\r\n      {/*BOTON QUE ABRE EL MODAL */}\r\n\r\n      <button\r\n        onClick={() => {setModalIsOpen(true); }}\r\n        style={{backgroundColor:\"#E5E4E2\"}}\r\n        className=\"uk-button \">\r\n        Nuevo Tenant [+]\r\n      </button>\r\n\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={() => {setModalIsOpen(false);}}\r\n        style={customStyles}>\r\n          \r\n        <div>\r\n          <a\r\n            href=\"#\"\r\n            onClick={() => {\r\n              setModalIsOpen(false);\r\n            }}\r\n            className=\"uk-button uk-button-muted uk-align-right\">\r\n            <span uk-icon=\"icon: close\"> </span>\r\n          </a>{\" \"}\r\n\r\n          <br/>\r\n        </div>\r\n\r\n        <br/>\r\n        <FormikFormTenant />\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalButton;\r\n","import React from 'react';\r\nimport {Formik} from \"formik\" // Es una libreria de React que facilita el manejo de formularios\r\nimport * as Yup from \"yup\"    //libreria para validar el formulario \r\nimport ErrorDialog from \"../ErrorDialog\"\r\n\r\n\r\n// VALIDACIONES --> las vamos a definir usando YUP como si fuera un SCHEMA de base de datos\r\n\r\n\r\nconst validationSchema = Yup.object().shape(  {\r\n    \r\n    description: Yup.string()\r\n    .min(20, \"Please describe with more detail...\")\r\n    .required(\"Please enter your problem\"),\r\n})\r\n\r\n////////////FORMULARIO\r\n\r\nexport default function FormikFormTicket (){\r\n   \r\n    return (\r\n    <div>\r\n    <Formik\r\n        //aqui estan los valores del formulario (Schemas)\r\n        initialValues= { {description: \"\"  }}\r\n        validationSchema={validationSchema}\r\n        onSubmit= { (values, {setSubmitting, resetForm} )=>{\r\n           setSubmitting(true)\r\n           // usamos setTime out como si fuera un post a servidor para corroborar que se envía\r\n           setTimeout(  ()=>{\r\n               alert(JSON.stringify(values, null, 2));\r\n               resetForm();\r\n               setSubmitting(false)\r\n           }, 500)\r\n        }}\r\n        >\r\n            {\r\n             ({values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting}  )=>(\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                <div>\r\n                <label htmlFor=\"description\"> Problem:           </label>\r\n                <textarea \r\n                    rows=\"6\" \r\n                    placeholder=\"Describe with detail the problem...\"\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    id=\"description\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.description}\r\n                    className={touched.description && errors.description ? \"uk-form-danger uk-text-secondary uk-text-center uk-input\" : \" uk-form-success uk-text-secondary uk-text-center uk-input\"} \r\n                    >\r\n                </textarea>\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.description}\r\n                    message={errors.description}\r\n                    /> \r\n                </div>\r\n\r\n                <div className=\"uk-submit\">\r\n                    <button \r\n                    \r\n                    type=\"submit\"\r\n                    disabled={isSubmitting} // no se pueda apretar mientras se sube}\r\n                    className=\"uk-button uk-button-primary uk-align-center\"\r\n                    >      LEVANTAR TICKET          </button>\r\n                </div>\r\n\r\n\r\n                </form>\r\n                )}\r\n        \r\n    </Formik>\r\n    </div>\r\n\r\n    \r\n    )}\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport Modal from \"react-modal\"\r\nimport FormikFormTicket from \"./FormikFormTicket\"\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: '25%',\r\n    left: '50%',\r\n    right: 'auto',\r\n    bottom: 'auto',\r\n    width: \"40%\",\r\n    height: '50%',\r\n    transform: 'translate(-40%, -20%)',\r\n    border: 'solid 1px #f07e1c'\r\n  },\r\n};\r\n\r\nfunction ModalButton () {\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n  \r\n    return (\r\n      <div className=\"uk-margin-top uk-text-center\">\r\n\r\n        <button\r\n          style={{backgroundColor:\"#E5E4E2\"}}\r\n          onClick= { ()=>{setModalIsOpen(true)}  }\r\n          className=\"uk-button\"> \r\n          NUEVO TICKET [+]\r\n        </button>\r\n\r\n          <Modal \r\n            isOpen={modalIsOpen}\r\n            onRequestClose={()=>{setModalIsOpen(false)}}\r\n            style={customStyles}>\r\n       \r\n          <div>\r\n            <a \r\n              href=\"#\"\r\n              onClick= {()=>{setModalIsOpen(false)}  }\r\n              className=\"uk-button uk-button-muted uk-align-right\">\r\n              <span uk-icon=\"icon: close\"> </span>     \r\n            </a> \r\n\r\n            <br/>\r\n          </div>\r\n            \r\n            <br/>\r\n            <FormikFormTicket/>\r\n          </Modal>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default ModalButton;\r\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AppContext from \"../AppContext\";\nimport ModalButtonTenant from \"./Modals_Forms/ModalButtonTenant\";\nimport ModalButtonTicket from \"./Modals_Forms/ModalButtonTicket\";\n\nexport default class NavBar extends Component {\n  static contextType = AppContext;\n\n  state = {\n    currentPos: \"\",\n    homePath: \"/home\",\n  };\n\n  updateState = () => {\n    // Ajusta homePath\n    const { currentUser } = this.context;\n    console.log(\"currentUser\", currentUser);\n\n    if ([\"Admin\", \"Tecnician\"].includes(currentUser.role)) { this.setState({ homePath: \"/home/tenants\" });} else { this.setState({ homePath: `/home/tickets/${currentUser.tenant._id}` });\n    }\n    // Ajusta currentPos\n    const currentPath = window.location.pathname;\n    const lbl =\n      currentPath === this.state.homePath\n        ? \"\"\n        : currentPath.startsWith(\"/home/tenants\")\n        ? \"\"\n        : \"TICKETS\";\n    this.setState({ currentPos: lbl });\n  };\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  render() {\n    console.log(\"location:\", this.state.currentPos);\n    const { removeUser } = this.context;\n    return (\n      \n      <nav className=\"uk-navbar-container uk-navbar\" \n           style={{border: 'solid 1px #f07e1c', backgroundColor:\"#E5E4E2\"}}>\n        <div className=\"uk-navbar-left\">\n          <ul className=\"uk-navbar-nav\" >\n            <li className=\"uk-margin-right uk-margin-left\">\n              <Link onClick={() => this.updateState()} to={this.state.homePath}>\n                Home\n              </Link>{\" \"}\n            </li>\n\n            <li uk-accordion=\"multiple: true\" className=\"uk-align-center\">\n\n              <div className=\"uk-closed\">\n                <Link to=\"#\" className=\"uk-accordion-title uk-text-small\">  {\" \"} TENANTS </Link>\n\n                <div className=\"uk-accordion-content\">\n                  <ul>    {\" \"} {/*Hay que poner un evento donde al hacer clic se agregue el nombre del tenant del lado derecho*/}\n                    <li>  {\" \"} <Link to=\"/id:Bimbo\" className=\"uk-link-muted\"> Bimbo </Link>{\" \"}  </li>\n                    <li>  {\" \"}¿<Link to=\"/id:Coca\" className=\"uk-link-muted\">  Coca  </Link>{\" \"}  </li>\n                    <li>  {\" \"} <Link to=\"/id:Pepsi\" className=\"uk-link-muted\">Pepsi  </Link>{\" \"}  </li>\n                  </ul>\n                </div>\n              </div>\n\n            </li>\n\n            {/* POS ACTUAL */}\n            <li className=\" \">\n              <Link to=\"#\" onClick={() => this.updateState()}>\n                {this.state.currentPos}\n              </Link>{\" \"}\n            </li>\n\n            {/* NUEVO TICKET */}\n            <li className=\"uk-button\" >\n              <ModalButtonTenant />\n            </li>\n\n            <li className=\"uk-button \">\n              <ModalButtonTicket  />\n            </li>\n\n          </ul>\n        </div>\n\n        <div className=\"uk-navbar-right\">\n          <ul className=\"uk-navbar-nav\">\n            <li>\n              <Link to=\"#\" onClick={() => removeUser()}>\n              <strong>Logout</strong> \n              </Link>{\" \"}\n              {/* Al hacer clic post para logout */}\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class TenantCard extends Component {\n  render() {\n    return (\n      <div>\n        \n      <div  className=\" uk-card-default uk-margin-left\" \n            style={{border: 'solid 3px #f07e1c'}}>\n\n        <Link to={`/home/tickets/${this.props.tenantId}`}>\n\n          <div className=\"uk-card-title uk-margin-top\">\n           <strong> {this.props.code} </strong>\n            <br/> - <br/>\n            <strong> {this.props.name} </strong>\n          </div>\n\n          <div className=\"uk-card-body\">\n            <div> Ver Tickets </div>\n          </div>\n        </Link>\n      </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport TenantCard from \"./TenantCard\";\nimport { getTenants } from \"../services/tenantService\";\n\nexport default class TenantsContainer extends Component {\n  state = {tenants: [],};\n\n   componentDidMount() {\n    // Si no tiene un tenant en particular, recupera de todos\n    getTenants()\n      .then((resp) => {\n        const { data: tenants } = resp;\n        this.setState({ tenants });\n        console.log(\"Tenants: \", tenants);\n      })\n      .catch((reason) => console.log(\"Error: \", reason));\n  }\n\n  render() {\n    return (\n      <section className=\"uk-section uk-background-primary\">\n        <div className=\"uk-grid uk-child-width-1-2@s uk-child-width-1-3@m\">\n          {this.state.tenants.map((tenant) => {\n            //   console.log(tenant);\n              return (\n            <TenantCard\n              tenantId={tenant._id}\n              name={tenant.name}\n              code={tenant.code}\n              key={tenant._id}  \n            />\n          )\n          } )}\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport dayjs from \"dayjs\";\nimport relativeTime from 'dayjs/plugin/relativeTime';\ndayjs.extend(relativeTime);\n\nexport default class Timer extends Component {\n    state = {\n        tick: false,\n        timerId: 0\n    }\n  \n    constructor(params) {\n        super(params);\n        const timerId = setInterval(() => {\n            this.setState({tick: !this.state.tick});\n        }, 1000);\n        this.setState({timerId});\n        this.componentWillUnmount = this.componentWillUnmount.bind();\n    }\n\n    componentWillUnmount() {\n        //clearInterval(this.state.timerId);\n    }\n\n    render() {\n        let h = String(parseInt(dayjs().diff(dayjs(this.props.reportDate),\"hour\")) % 24);\n        let m = String(parseInt(dayjs().diff(dayjs(this.props.reportDate),\"minute\")) % 60);\n        let s = String(parseInt(dayjs().diff(dayjs(this.props.reportDate),\"second\")) % 60);\n        h = (h.length < 2) ? \"0\" + h : h;\n        m = (m.length < 2) ? \"0\" + m : m;\n        s = (s.length < 2) ? \"0\" + s : s;\n    return (\n        <div className=\"uk-heading-small\">\n          <span uk-icon=\"clock\"></span>\n          {\n           dayjs().diff(dayjs(this.props.reportDate),\"day\") +\n           'd ' + h + \":\" + m + \":\" + s}\n        </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport Timer from \"./Timer\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\ndayjs.extend(relativeTime);\n\nexport default class TicketCard extends Component {\n  render() {\n    return (\n      <div className=\"uk-card-body\">\n        {/* Encabezado con badges e íconos */}\n        <div className=\"uk-grid uk-flex-around\">\n          <div>\n            <div\n              className={\n                this.props.status === \"Open\"\n                  ? \"uk-label-danger\"\n                  : this.props.status === \"ClosingRequested\"\n                  ? \"uk-label-warning\"\n                  : \"uk-label-success\"\n              }\n            >\n              {this.props.status === \"Open\"\n                ? \"Abierto\"\n                : this.props.status === \"ClosingRequested\"\n                ? \"Validar\"\n                : \"Cerrado\"}\n            </div>\n          </div>\n          <div>\n            <ul className=\"uk-iconnav\">\n              <li>\n                <button href=\"#\" uk-icon=\"icon: file-edit\"></button>\n              </li>\n              <li>\n                <button href=\"#\" uk-icon=\"icon: trash\"></button>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <div className=\"uk-label\">{this.props.tenantCode}</div>\n          </div>\n        </div>\n        {/* Timer actualizado en tiempo real */}\n        <Timer reportDate={this.props.reportDate} />\n        {/* Labels Asignado a .... X */}\n        <div\n          className=\"uk-flex uk-flex-center uk-flex-column uk-child-width-1-1\"\n          style={{ alignItems: \"start\", justifyContent: \"flex-end\" }}\n        >\n          <div style={{ display: \"flex\", textAlign: \"initial\" }}>\n            <div className=\"uk-width-expand\" uk-leader=\"\">\n              <span uk-icon=\"users\"></span>\n              <span className=\"uk-margin\">Asignado a</span>\n            </div>\n            <div className=\"uk-margin-small-left\">{this.props.tecnicianName}</div>\n            <hr />\n          </div>\n          {/* Descripción colapsable */}\n          <div className=\"container-fluid\" style={{ textAlign: \"initial\" }}>\n            <ul uk-accordion=\"multiple: true\">\n              <li className=\"uk-closed\">\n                <a className=\"uk-accordion-title\">Descripción</a>\n                <div className=\"uk-accordion-content\">\n                  <article className=\"uk-comment uk-comment-primary uk-margin\">\n                    <header className=\"uk-comment-header uk-grid-medium uk-flex-middle\">\n                      <div className=\"uk-width-expand\">\n                        <h4 className=\"uk-comment-title uk-margin-remove\">\n                          <span uk-icon=\"user\"></span>{\" \"}\n                          <span>{this.props.user}</span>\n                        </h4>\n                        <span>\n                          {dayjs(this.props.reportDate).format(\n                            \"D/MM/YYYY h:mm a\"\n                          )}\n                        </span>\n                      </div>\n                    </header>\n                    <div className=\"uk-comment-body uk-text-justify\">\n                      <p>{this.props.description}</p>\n                    </div>\n                  </article>\n                </div>\n              </li>\n            </ul>\n          </div>\n          {/* Actividades colapsables */}\n          <div className=\"container-fluid\" style={{ textAlign: \"initial\" }}>\n            <ul uk-accordion=\"multiple: true\">\n              <li className=\"uk-closed\">\n                <a className=\"uk-accordion-title\">Actividades</a>\n                <div className=\"uk-accordion-content\">\n                  <div className=\"uk-overflow-auto uk-height-small uk-width-max uk-width-auto\">\n                    <table className=\"uk-table uk-table-striped\" style={{}}>\n                      <thead>\n                        <tr>\n                          <th>Fecha</th>\n                          <th>Actividades</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.props.activities.map((activity) => (\n                          <tr>\n                            {/* 15/05 18:14 */}\n                            <td>{dayjs(activity.date).format(\"D/MM H:mm\")}</td>\n                            <td>{activity.activity}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                  <div>\n                    <ul className=\"uk-iconnav uk-align-right\">\n                      <li className=\"uk-margin-small-top\">\n                        <a href=\"#\" uk-icon=\"icon: plus-circle\"></a>\n                      </li>\n                    </ul>\n                  </div>\n                  <div></div>\n                </div>\n              </li>\n            </ul>\n          </div>\n          {/* Botones Cerrar / Validar */}\n          <div className=\"uk-grid uk-flex-around\">\n            <div>\n              <a className=\"uk-button uk-button-default\">Validar</a>\n            </div>\n            <div>\n              <a className=\"uk-button uk-button-default\">Cerrar</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport TicketCard from \"./TicketCard\";\nimport { getTickets, getTicketsByTenantId } from \"../services/ticketsService\";\n\nexport default class TicketsContainer extends Component {\n  state = { tickets: [] };\n\n  componentDidMount() {\n    // Revisa si es de 1 tenant en particular\n    const { tenantId } = this.props.match.params;\n    // Si es de un tenant, recupera sólo de ese tenant\n    if (tenantId) {\n      getTicketsByTenantId(tenantId)\n        .then((resp) => {\n          const { data: tickets } = resp;\n          this.setState({ tickets });\n        })\n        .catch((reason) => console.log(\"Error: \", reason));\n    } else {\n      // Si no tiene un tenant en particular, recupera de todos\n      getTickets()\n        .then((tickets) => {\n          this.setState({ tickets });\n        })\n        .catch((reason) => console.log(\"Error: \", reason));\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"uk-section\">\n        <div uk-filter=\"target: .js-filter\">\n          {/* Filter Controls */}\n          <ul className=\"uk-subnav uk-subnav-pill\">\n            <li className=\"uk-active\" uk-filter-control=\"\">\n              <button\n                className=\"uk-button uk-button-muted\"\n                style={{ backgroundColor: \"black\", color: \"white\" }}\n              >\n                Todos\n              </button>\n            </li>\n\n            <li uk-filter-control=\"[status='Open']\">\n              <button\n                style={{ backgroundColor: \"red\", color: \"white\" }}\n                className=\"uk-button uk-button-muted\"\n              >\n                Abiertos\n              </button>\n            </li>\n\n            <li uk-filter-control=\"[status='ClosingRequested']\">\n              <button\n                style={{ backgroundColor: \"orange\", color: \"white\" }}\n                className=\"uk-button uk-button-muted\"\n              >\n                Validar\n              </button>\n            </li>\n\n            <li uk-filter-control=\"[status='Closed']\">\n              <button\n                style={{ backgroundColor: \"green\", color: \"white\" }}\n                className=\"uk-button uk-button-muted\"\n              >\n                Cerrados\n              </button>\n            </li>\n          </ul>\n\n          {/* Layout items */}\n          <div\n            className=\"js-filter uk-grid uk-text-center uk-child-width-1-1 uk-child-width-1-2@s uk-child-width-1-3@m\"\n            uk-scrollspy=\"cls: uk-animation-fade; target: .uk-card; delay: 100; repeat: false\"\n          >\n            {Array.isArray(this.state.tickets) && this.state.tickets.length\n              ? this.state.tickets.map((ticket) => {\n                  return (\n                    <div\n                      status={ticket.status}\n                      className=\"uk-card uk-card-default uk-margin-bottom\"\n                    >\n                      <TicketCard\n                        key={ticket.id}\n                        status={ticket.status}\n                        tenantCode={ticket.tenantCode}\n                        tecnicianName={ticket.tecnicianName}\n                        user={ticket.clientUserFullName}\n                        reportDate={ticket.reportDate}\n                        description={ticket.issueDescription}\n                        activities={ticket.activities}\n                        internalNotes={ticket.internalNotes}\n                        closedDate={ticket.closedDate}\n                        clientComments={ticket.clientComments}\n                      />\n                    </div>\n                  );\n                })\n              : null}\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class TicketCard extends Component {\n  render() {\n    return (\n      <div className=\"uk-card-body\">\n        {/* Encabezados con Rol, Tenant e íconos */}\n        <div className=\"uk-grid uk-flex-around\">\n          <div>\n            <div className=\"uk-label\">{this.props.role}</div>\n          </div>\n          <div>\n            <ul className=\"uk-iconnav\">\n              <li>\n                <button className=\"uk-button-muted\" uk-icon=\"icon: file-edit\"></button>\n              </li>\n              <li>\n                <button className=\"uk-button-muted\" uk-icon=\"icon: trash\"></button>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <div className=\"uk-label\">{this.props.tenantCode}</div>\n          </div>\n        </div>\n        {/* Nombre y Apellido */}\n        <div className=\"uk-text-large uk-text-bold uk-margin\">\n          <span uk-icon=\"user\"></span>\n          \n          {`${this.props.name.toUpperCase()} ${this.props.lastName.toUpperCase()}`}\n        </div>\n        {/* Labels Email .... X */}\n        <div\n          className=\"uk-flex uk-flex-center uk-flex-column uk-child-width-1-1\"\n          style={{ alignItems: \"start\", justifyContent: \"flex-end\" }}\n        >\n          <div style={{ display: \"flex\", textAlign: \"initial\" }}>\n            <div className=\"uk-width-expand\" uk-leader=\"\">\n              <span uk-icon=\"mail\"></span>\n              <span className=\"uk-margin\">Email </span>\n            </div>\n            <div className=\"uk-margin-small-left\">{this.props.email}</div>\n            <hr />\n          </div>\n        </div>\n        {/* Labels Phone .... X */}\n        <div\n          className=\"uk-flex uk-flex-center uk-flex-column uk-child-width-1-1\"\n          style={{ alignItems: \"start\", justifyContent: \"flex-end\" }}\n        >\n          <div style={{ display: \"flex\", textAlign: \"initial\" }}>\n            <div className=\"uk-width-expand\" uk-leader=\"\">\n              <span uk-icon=\"phone\"></span>\n              <span className=\"uk-margin\">Phone </span>\n            </div>\n            <div className=\"uk-margin-small-left\">{this.props.phone}</div>\n            <hr />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport {Formik} from \"formik\" // Es una libreria de React que facilita el manejo de formularios\r\nimport * as Yup from \"yup\"    //libreria para validar el formulario \r\nimport ErrorDialog from \"../ErrorDialog\"\r\n\r\n\r\n// VALIDACIONES --> las vamos a definir usando YUP como si fuera un SCHEMA de base de datos\r\n\r\n\r\nconst validationSchema = Yup.object().shape(  {\r\n    name: Yup.string()\r\n                        \r\n    .min(1, \"Write your name\")\r\n    .max(20, \"Your name is too long\")\r\n    .required(\"You must have a name\"),\r\n\r\n    lastName: Yup.string()\r\n                        \r\n    .min(1, \"Write your name\")\r\n    .max(20, \"Your name is too long\")\r\n    .required(\"You must have a lastname\"),\r\n\r\n    email: Yup.string()\r\n    .email(\"You must enter a valid email\")\r\n    .required(\"You must enter your email\"),\r\n\r\n    tenantCode: Yup.string()\r\n    .min(1, \"Write your code\")\r\n    .required(\"You must have a code\"),\r\n\r\n    phone: Yup.string()\r\n    .required(\"You must enter your phone\"),\r\n\r\n    role: Yup.string()\r\n    .required(\"Choose a role\")\r\n\r\n})\r\n\r\n////////////FORMULARIO\r\n\r\nexport default function FormikFormUser (){\r\n   \r\n    return (\r\n    <div className=\"uk-margin\">\r\n        \r\n    <Formik\r\n        //aqui estan los valores del formulario (Schemas)\r\n        initialValues= { {name: \"\", lastName: \"\", email: \"\", role: \"\", tenantCode:\"\", phone:\"\",    }}\r\n        validationSchema={validationSchema}\r\n        onSubmit= { (values, {setSubmitting, resetForm} )=>{\r\n           setSubmitting(true)\r\n           // usamos setTime out como si fuera un post a servidor para corroborar que se envía\r\n           setTimeout(  ()=>{\r\n               alert(JSON.stringify(values, null, 2));\r\n               resetForm();\r\n               setSubmitting(false)\r\n           }, 500)\r\n        }}\r\n        >\r\n            {\r\n             ({values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting}  )=>(\r\n                <form onSubmit={handleSubmit}>\r\n                   \r\n                <div>\r\n                    <label htmlFor=\"name\" >    Name:       </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    placeholder=\" Enter your name\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.name}\r\n                    className={touched.name && errors.name ? \"uk-form-danger uk-text-secondary uk-text-center uk-input\" : \" uk-input uk-form-success uk-text-secondary uk-text-center\"} \r\n                   />\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.name}\r\n                    message={errors.name}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"lastname\">    Last Name:       </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    id=\"lastName\"\r\n                    placeholder=\" Enter your lastname\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.lastName}\r\n                    className={touched.name && errors.name ? \"uk-form-danger uk-text-secondary uk-text-center uk-input\" : \"uk-form-success uk-text-secondary uk-text-center uk-input\"} \r\n                   />\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.lastName}\r\n                    message={errors.lastName}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"email\">     Email:            </label>\r\n                    <input \r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    placeholder=\" Enter your email\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.email}\r\n                    className={touched.email && errors.email ? \"uk-form-danger uk-text-secondary uk-text-center uk-input\" : \"uk-input uk-text-center uk-form-success uk-text-secondary\"}\r\n                    />\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.email}\r\n                    message={errors.email}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"tenantCode\" > Tenant Code:           </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"tenantCode\"\r\n                    id=\"tenantCode\"\r\n                    placeholder=\" Enter your designed code\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.tenantCode}\r\n                    className={touched.tenantCode && errors.tenantCode ? \"uk-input uk-text-center uk-form-danger uk-text-secondary uk-text-center\" : \"uk-input uk-text-center uk-form-success uk-text-secondary uk-text-center\"}\r\n                    />\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.tenantCode}\r\n                    message={errors.tenantCode}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                <label htmlFor=\"role\"> Role:           </label>\r\n                   {/*cambiar a radio */}\r\n                    <select\r\n                        name=\"role\"\r\n                        id=\"role\"\r\n                        value={values.role}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        className={touched.role && errors.role ? \"uk-select uk-form-danger uk-text-secondary uk-text-center\" : \"uk-select uk-form-success uk-text-secondary uk-text-center\"}\r\n                    >\r\n                        <option value=\"\"            label=\"Select a role\"  />\r\n                        <option value=\"User\"        label=\"User\" />\r\n                        <option value=\"Admin\"       label=\"Admin\" />\r\n                        <option value=\"Technician\"  label=\"Technician\" />\r\n                    </select>\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.role}\r\n                    message={errors.role}\r\n                    /> \r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"phone\" >Phone:          </label>\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"phone\"\r\n                    id=\"phone\"\r\n                    placeholder=\" Enter your phone\"  \r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.phone}\r\n                    className={touched.phone && errors.phone ? \"uk-input uk-form-danger uk-text-secondary uk-text-center\" : \" uk-input uk-form-success uk-text-secondary uk-text-center\"}\r\n                    />\r\n\r\n                    <ErrorDialog\r\n                    touched={touched.phone}\r\n                    message={errors.phone}\r\n                    /> \r\n                </div>\r\n\r\n                <div className=\"uk-submit\">\r\n                    <button \r\n                    \r\n                    type=\"submit\"\r\n                    disabled={isSubmitting} // no se pueda apretar mientras se sube}\r\n                    className=\"uk-button uk-button-primary uk-align-center\"\r\n                    >      SUBMIT          </button>\r\n                </div>\r\n\r\n\r\n                </form>\r\n                )}\r\n        \r\n    </Formik>\r\n    </div>\r\n\r\n    \r\n    )}\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport Modal from \"react-modal\"\r\nimport FormikFormUser from \"./FormikFormUser\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: '25%',\r\n    left: '50%',\r\n    right: 'auto',\r\n    bottom: 'auto',\r\n    width: \"40%\",\r\n    height: '50%',\r\n    transform: 'translate(-40%, -20%)',\r\n    border: 'solid 1px #f07e1c'\r\n  },\r\n};\r\n\r\nfunction ModalButton () {\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n  \r\n    return (\r\n      <div className=\"uk-margin-top uk-text-center \">\r\n\r\n        <button \r\n          onClick= { ()=>{setModalIsOpen(true)}  }\r\n          className=\"uk-button uk-button-primary\"\r\n        > \r\n            New \"COMPONENT\"\r\n        </button>\r\n\r\n          <Modal \r\n            isOpen={modalIsOpen}\r\n            onRequestClose={()=>{setModalIsOpen(false)}}\r\n            style={customStyles}>\r\n\r\n          <div>\r\n            <button \r\n              onClick= {()=>{setModalIsOpen(false)}  }\r\n              className=\"uk-button uk-button-muted uk-align-right\">\r\n              <span uk-icon=\"icon: close\"> </span>     \r\n            </button> \r\n            <br/>\r\n          </div>\r\n            \r\n            <br/>\r\n              <FormikFormUser/>\r\n\r\n             \r\n          </Modal>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default ModalButton;\r\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport FormikForm from \"./FormikForm\";\nimport NavBar from \"./Navbar\";\nimport TenantsContainer from \"./TenantsContainer\";\nimport TicketsContainer from \"./TicketsContainer\";\nimport UsersContainer from \"./UsersContainer\";\n\nimport AppContext from \"../AppContext\";\n\nexport default class Home extends Component {\n  static contextType = AppContext;\n\n    \n\n  componentDidMount() {\n    const { history } = this.props;\n    const { _id, role, tenant } = this.context.currentUser;\n    if (!_id) {\n      history.push(\"/login\");\n    } else {\n      if ([\"Admin\", \"Tecnician\"].includes(role)) {\n        history.push(\"/home/tenants\");\n      } else {\n        history.push(`/home/tickets/${tenant._id}`);\n      }\n    }\n  }\n\n  render() {\n    const users = [\n      {\n        id: \"abc\",\n        email: \"mario@mapps.com\",\n        role: \"User\",\n        name: \"Mario\",\n        lastName: \"Terrazas\",\n        tenantCode: \"TR\",\n        phone: \"55 10 40 50 68\",\n      },\n      {\n        id: \"bcd\",\n        email: \"josa@mapps.com\",\n        role: \"Admin\",\n        name: \"Josafat\",\n        lastName: \"Solis\",\n        tenantCode: \"MAPPS\",\n        phone: \"55 10 40 00 99\",\n      },\n      {\n        id: \"bdc\",\n        email: \"rod@mapps.com\",\n        role: \"Admin\",\n        name: \"Rodrigo\",\n        lastName: \"Amador\",\n        tenantCode: \"HZ\",\n        phone: \"55 88 40 00 99\",\n      },\n    ];\n    return (\n      // Manda los valores al AppContext para que estén disponibles en todos lados\n      <div className=\"App\">\n        <NavBar />\n        {/* <UsersContainer users={users} /> */}\n        <Switch>\n          <Route exact path=\"/home/tenants\" component={TenantsContainer} />\n          <Route\n            exact\n            path=\"/home/users\"\n            component={(props) => <UsersContainer {...props} users={users} />}\n          />\n          {/* \n                // ¡¡Cuidado con hacer esto!! Porque hace que no lleguen los props al componente\n                <Route exact path=\"/home/tickets/:tenantId\" component={() => TicketsContainer} />\n            */}\n          <Route exact path=\"/home/tickets\" component={TicketsContainer} />\n          <Route\n            exact\n            path=\"/home/tickets/:tenantId\"\n            component={TicketsContainer}\n          />\n          <Route exact path=\"/home/tickets/new\" component={FormikForm} />\n        </Switch>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport UserCard from \"./UserCard\";\nimport { getUsers } from \"../services/userService\";\nimport ModalButtonUser from \"./Modals_Forms/ModalButtonUser\"\n\nexport default class UsersContainer extends Component {\n  state = {\n    users: []\n  }\n\n  constructor(params) {\n    super(params);\n    getUsers().then(users => this.setState({ users: []}));\n  }\n\n  render() {\n    return (\n      <section className=\"uk-section\">\n       <div>  <ModalButtonUser/>        </div>\n\n        <div uk-filter=\"target: .js-filter\">\n          {/* Filter Controls */}\n          <ul className=\"uk-subnav uk-subnav-pill\">\n            <li className=\"uk-active\" uk-filter-control=\"\"> <button className=\"uk-button-muted\">Todos</button>   </li>\n            {[...new Set(this.state.users.map(user => user.tenantCode))].map(tenant => (\n                 <li uk-filter-control={\"[tenant='\" + tenant + \"']\"}>\n                 <button className=\"uk-button-muted\">{tenant}</button>\n               </li>\n            ))}\n          </ul>\n\n          {/* Layout items */}\n          <div\n                className=\"js-filter uk-grid uk-text-center uk-child-width-1-1 uk-child-width-1-2@s uk-child-width-1-3@m\"\n                uk-scrollspy=\"cls: uk-animation-fade; target: .uk-card; delay: 100; repeat: false\"\n          >\n        \n            {this.props.users.map((user) => (\n\n\n              <div tenant={user.tenantCode}\n                       className=\"uk-card uk-card-default uk-margin-bottom\"\n              >\n                <UserCard\n                    key={user.id}\n                    tenantCode={user.tenantCode}\n                    role={user.role}\n                    name={user.name}\n                    lastName={user.lastName}\n                    email={user.email}\n                    phone={user.phone}\n                />\n              \n                </div>\n              \n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport AppContext from './AppContext';\nimport \"./App.css\";\nimport Login from \"./components/Login\";\nimport Home from './components/Home';\nimport { logout } from \"./services/loginService\";\n\n\nclass App extends Component {\n  state = {\n    currentUser: JSON.parse(localStorage.getItem(\"currentUser\")) || {},\n  };\n\n  setUser = (user) => {\n    console.log(\"SetUser\", user);\n    localStorage.setItem(\"currentUser\", JSON.stringify(user));\n    this.setState({ currentUser: user });\n  };\n\n  removeUser = () => {\n    localStorage.removeItem(\"currentUser\");\n    this.setState({ currentUser: {} });\n    logout();\n    const { history } = this.props;\n    history.push(\"/login\");\n  }\n\n  componentDidMount() {\n    const { history } = this.props;\n    const { _id, role, tenant } = this.state.currentUser;\n    if(!_id) {\n      history.push(\"/login\")\n    } else {\n      if([\"Admin\", \"Tecnician\"].includes(role)) {\n            history.push(\"/home/tenants\");\n      } else {\n        history.push(`/home/tickets/${tenant._id}`)\n      }\n    }\n  }\n\n  render() {\n    const currentUser = this.state.currentUser;\n    const { state, setUser, removeUser } = this;\n    return (\n      // Manda los valores al AppContext para que estén disponibles en todos lados\n      <AppContext.Provider value={{ state, setUser, removeUser, currentUser }}>\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/home/*\" component={Home} />\n      </AppContext.Provider>\n    );\n  }\n}\n\nconst AppWithRouter = withRouter(App);\n\nexport default AppWithRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport UIkit from \"uikit\"\nimport \"uikit/dist/css/uikit.min.css\"\nimport Icons from \"uikit/dist/js/uikit-icons\"\nUIkit.use(Icons)\n\nReactDOM.render(\n    <BrowserRouter>\n        {/* <App /> */}\n        <Route path=\"/\" component={(props) => App(props)} />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}